
-- 1. Stored Procedures to Insert Data


CREATE PROCEDURE InsertUserInfo
    @EmailId VARCHAR(255), @UserName VARCHAR(50), @Role VARCHAR(20), @Password VARCHAR(20)
AS
BEGIN
    INSERT INTO UserInfo VALUES (@EmailId, @UserName, @Role, @Password);
END
GO

CREATE PROCEDURE InsertEventDetails
    @EventName VARCHAR(50), @EventCategory VARCHAR(50), @EventDate DATETIME, 
    @Description VARCHAR(MAX), @Status VARCHAR(20)
AS
BEGIN
    INSERT INTO EventDetails (EventName, EventCategory, EventDate, Description, Status)
    VALUES (@EventName, @EventCategory, @EventDate, @Description, @Status);
END
GO

CREATE PROCEDURE InsertSpeaker
    @SpeakerName VARCHAR(50)
AS
BEGIN
    INSERT INTO SpeakersDetails (SpeakerName) VALUES (@SpeakerName);
END
GO

CREATE PROCEDURE InsertSession
    @EventId INT, @SessionTitle VARCHAR(50), @SpeakerId INT,
    @Description VARCHAR(MAX), @SessionStart DATETIME, @SessionEnd DATETIME, @SessionUrl VARCHAR(MAX)
AS
BEGIN
    INSERT INTO SessionInfo (EventId, SessionTitle, SpeakerId, Description, SessionStart, SessionEnd, SessionUrl)
    VALUES (@EventId, @SessionTitle, @SpeakerId, @Description, @SessionStart, @SessionEnd, @SessionUrl);
END
GO

CREATE PROCEDURE InsertParticipant
    @ParticipantEmailId VARCHAR(255), @EventId INT, @SessionId INT, @IsAttended BIT
AS
BEGIN
    INSERT INTO ParticipantEventDetails (ParticipantEmailId, EventId, SessionId, IsAttended)
    VALUES (@ParticipantEmailId, @EventId, @SessionId, @IsAttended);
END
GO


-- 2. Stored Procedures to Delete Data


CREATE PROCEDURE DeleteUser
    @EmailId VARCHAR(255)
AS
BEGIN
    DELETE FROM UserInfo WHERE EmailId = @EmailId;
END
GO

CREATE PROCEDURE DeleteEvent
    @EventId INT
AS
BEGIN
    DELETE FROM EventDetails WHERE EventId = @EventId;
END
GO

CREATE PROCEDURE DeleteSpeaker
    @SpeakerId INT
AS
BEGIN
    DELETE FROM SpeakersDetails WHERE SpeakerId = @SpeakerId;
END
GO

CREATE PROCEDURE DeleteSession
    @SessionId INT
AS
BEGIN
    DELETE FROM SessionInfo WHERE SessionId = @SessionId;
END
GO

CREATE PROCEDURE DeleteParticipant
    @Id INT
AS
BEGIN
    DELETE FROM ParticipantEventDetails WHERE Id = @Id;
END
GO

-- 3. Stored Procedures to Update Data


CREATE PROCEDURE UpdateUser
    @EmailId VARCHAR(255), @UserName VARCHAR(50), @Role VARCHAR(20), @Password VARCHAR(20)
AS
BEGIN
    UPDATE UserInfo SET UserName = @UserName, Role = @Role, Password = @Password
    WHERE EmailId = @EmailId;
END
GO

CREATE PROCEDURE UpdateEvent
    @EventId INT, @EventName VARCHAR(50), @EventCategory VARCHAR(50),
    @EventDate DATETIME, @Description VARCHAR(MAX), @Status VARCHAR(20)
AS
BEGIN
    UPDATE EventDetails 
    SET EventName = @EventName, EventCategory = @EventCategory,
        EventDate = @EventDate, Description = @Description, Status = @Status
    WHERE EventId = @EventId;
END
GO

CREATE PROCEDURE UpdateSpeaker
    @SpeakerId INT, @SpeakerName VARCHAR(50)
AS
BEGIN
    UPDATE SpeakersDetails SET SpeakerName = @SpeakerName WHERE SpeakerId = @SpeakerId;
END
GO

CREATE PROCEDURE UpdateSession
    @SessionId INT, @EventId INT, @SessionTitle VARCHAR(50), @SpeakerId INT,
    @Description VARCHAR(MAX), @SessionStart DATETIME, @SessionEnd DATETIME, @SessionUrl VARCHAR(MAX)
AS
BEGIN
    UPDATE SessionInfo
    SET EventId = @EventId, SessionTitle = @SessionTitle, SpeakerId = @SpeakerId,
        Description = @Description, SessionStart = @SessionStart, SessionEnd = @SessionEnd, SessionUrl = @SessionUrl
    WHERE SessionId = @SessionId;
END
GO

CREATE PROCEDURE UpdateParticipant
    @Id INT, @ParticipantEmailId VARCHAR(255), @EventId INT, @SessionId INT, @IsAttended BIT
AS
BEGIN
    UPDATE ParticipantEventDetails
    SET ParticipantEmailId = @ParticipantEmailId, EventId = @EventId, SessionId = @SessionId, IsAttended = @IsAttended
    WHERE Id = @Id;
END
GO


-- 4. View: Speaker Detail of Particular Session


CREATE VIEW View_SpeakerSessionDetails
AS
SELECT 
    si.SessionId,
    si.SessionTitle,
    sd.SpeakerId,
    sd.SpeakerName,
    si.Description,
    si.SessionStart,
    si.SessionEnd,
    si.SessionUrl
FROM SessionInfo si
JOIN SpeakersDetails sd ON si.SpeakerId = sd.SpeakerId;
GO


-- SELECT * FROM View_SpeakerSessionDetails WHERE SessionId = 1;

-- 5. View: All Details of an Event


CREATE VIEW View_FullEventDetails
AS
SELECT 
    ed.EventId,
    ed.EventName,
    ed.EventCategory,
    ed.EventDate,
    ed.Description AS EventDescription,
    ed.Status,
    si.SessionTitle,
    sd.SpeakerName,
    sd.SpeakerId,
    ui.UserName AS ParticipantName,
    ui.EmailId AS ParticipantEmail,
    ped.IsAttended
FROM EventDetails ed
LEFT JOIN SessionInfo si ON ed.EventId = si.EventId
LEFT JOIN SpeakersDetails sd ON si.SpeakerId = sd.SpeakerId
LEFT JOIN ParticipantEventDetails ped ON ed.EventId = ped.EventId AND si.SessionId = ped.SessionId
LEFT JOIN UserInfo ui ON ped.ParticipantEmailId = ui.EmailId;
GO


-- SELECT * FROM View_FullEventDetails WHERE EventId = 1;


-- 6. Non-Clustered Indexes


CREATE NONCLUSTERED INDEX IX_UserInfo_EmailId ON UserInfo(EmailId);
CREATE NONCLUSTERED INDEX IX_EventDetails_EventDate ON EventDetails(EventDate);
CREATE NONCLUSTERED INDEX IX_SessionInfo_SessionTitle ON SessionInfo(SessionTitle);
CREATE NONCLUSTERED INDEX IX_SpeakersDetails_SpeakerName ON SpeakersDetails(SpeakerName);
CREATE NONCLUSTERED INDEX IX_ParticipantEventDetails_Email ON ParticipantEventDetails(ParticipantEmailId);
GO
